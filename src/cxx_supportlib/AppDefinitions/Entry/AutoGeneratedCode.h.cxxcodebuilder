#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2018 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

require 'build/support/vendor/cxx_hinted_parser/lib/cxx_hinted_parser'

def main
  fields = parse_config_class_fields
  comment copyright_header_for(__FILE__), 1
  separator

  comment %q{
    AppDefinitions/Entry/AutoGeneratedCode.h is automatically generated from
    AppDefinitions/Entry/AutoGeneratedCode.h.cxxcodebuilder by the build system.
    It uses the comment hints from AppDefinitions/Entry.h.

    To force regenerating this file:
      rm -f src/cxx_supportlib/AppDefinitions/Entry/AutoGeneratedCode.h
      rake src/cxx_supportlib/AppDefinitions/Entry/AutoGeneratedCode.h
  }

  separator


  function 'inline void Passenger::AppDefinitions::Entry::internStrings()' do
    add_code %Q{
      size_t totalSize = 0;
      size_t tmpSize;
      char *newStorage, *pos, *end;
    }

    separator
    comment 'Calculated required storage size'
    fields.each do |field|
      case field.type
      when 'StaticString'
        add_code %Q{
          totalSize += #{field.name}.size() + 1;
        }
      when 'StringKeyTable<StaticString>'
        add_code %Q{
          {
            StringKeyTable<StaticString>::ConstIterator it(#{field.name});
            while (*it != NULL) {
              totalSize += it.getValue().size() + 1;
              it.next();
            }
          }
        }
      when 'boost::container::vector<StaticString>'
        add_code %Q{
          {
            boost::container::vector<StaticString>::const_iterator it, end = #{field.name}.end();
            for (it = #{field.name}.begin(); it != end; it++) {
              totalSize += it->size() + 1;
              it.next();
            }
          }
        }
      end
    end

    separator
    comment 'Allocate new storage'
    add_code %Q{
      newStorage = pos = new char[totalSize];
      end = newStorage + totalSize;
    }

    separator
    comment 'Fill new storage'
    fields.each do |field|
      case field.type
      when 'StaticString'
        add_code %Q{
          pos = appendData(pos, end, #{field.name});
          pos = appendData(pos, end, "\\0", 1);
        }
      when 'StringKeyTable<StaticString>'
        add_code %Q{
          {
            StringKeyTable<StaticString>::Iterator it(#{field.name});
            while (*it != NULL) {
              pos = appendData(pos, end, it.getValue());
              pos = appendData(pos, end, "\\0", 1);
              it.next();
            }
          }
        }
      when 'boost::container::vector<StaticString>'
        add_code %Q{
          {
            boost::container::vector<StaticString>::const_iterator it, end = #{field.name}.end();
            for (it = #{field.name}.begin(); it != end; it++) {
              pos = appendData(pos, end, *it);
              pos = appendData(pos, end, "\\0", 1);
              it.next();
            }
          }
        }
      end
    end

    separator
    comment 'Move over pointers to new storage'
    add_code %Q{
      pos = newStorage;
    }
    fields.each do |field|
      case field.type
      when 'StaticString'
        add_code %Q{
          tmpSize = #{field.name}.size();
          #{field.name} = StaticString(pos, tmpSize);
          pos += tmpSize + 1;
        }
        separator
      when 'StringKeyTable<StaticString>'
        add_code %Q{
          {
            StringKeyTable<StaticString>::Iterator it(#{field.name});
            while (*it != NULL) {
              tmpSize = it.getValue().size();
              it.getValue() = StaticString(pos, tmpSize);
              pos += tmpSize + 1;
              it.next();
            }
          }
        }
        separator
      when 'boost::container::vector<StaticString>'
        add_code %Q{
          {
            boost::container::vector<StaticString>::iterator it, end = #{field.name}.end();
            for (it = #{field.name}.begin(); it != end; it++) {
              tmpSize = it->size();
              *it = StaticString(pos, tmpSize);
              pos += tmpSize + 1;
              it.next();
            }
          }
        }
        separator
      end
    end

    separator
    comment 'Commit current storage'
    add_code %Q{
      storage.reset(newStorage);
    }
  end
end

def parse_config_class_fields
  config_h = File.dirname(__FILE__) + '/../Entry.h'
  parser = CxxHintedParser::Parser.load_file(config_h).parse
  parser.structs['Entry']
end

main
